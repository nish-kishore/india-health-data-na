level1 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY2 RegisterLevel TABLE")
#level 2 is the question information per register
level2 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY3. IndicatorRegister TABLE")
head(level1)
#load data
source("./code/init.R")
library(tidyverse)
library(magrittr)
View(level1)
rowSums(level1)
rowSums(level1, na.rm=T)
level1
rownames(level1)
rownames(level1) <- level1$NodeID
head(level1)
level1[,-1]
#most duplicated form
level1[,-1] %>% rowSums
T
#most duplicated form
level1[,-1] %>% rowSums(na.rm=T)
#keys
key1 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY1 Registerlevel KEY")
names(key1)
#read in data
#keys
key1 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY1 Registerlevel KEY", header=F)
key1 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY1 Registerlevel KEY")
#level 1 is the "register" or individual form by administrative level
level1 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY2 RegisterLevel TABLE")
#level 2 is the question information per register
level2 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY3. IndicatorRegister TABLE")
key1 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY1 Registerlevel KEY")
#level 1 is the "register" or individual form by administrative level
level1 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY2 RegisterLevel TABLE")
#level 2 is the question information per register
level2 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "CLAY3. IndicatorRegister TABLE")
#most duplicated form
level1[,-1] %>% rowSums(na.rm=T)
#most duplicated form
level1[,-1] %>% rowSums(na.rm=T) -> level1$sum
level1
level1 %>% merge(key1, by.x="NodeId", by.y="id")
level1 %>% merge(key1, by.x="NodeID", by.y="id")
level1 %>% merge(key1, by.x="NodeID", by.y="id", all.x=T)
level1 %>% merge(key1, by.x="NodeID", by.y="id", all.x=T) %>%
dplyr::select(id, sum)
level1 %>% merge(key1, by.x="NodeID", by.y="id", all.x=T) %>%
dplyr::select(label, sum)
level1 %>% merge(key1, by.x="NodeID", by.y="id", all.x=T) %>%
dplyr::select(label, sum) %>%
mutate(perc = sum/9*100)
level1 %>% merge(key1, by.x="NodeID", by.y="id", all.x=T) %>%
dplyr::select(label, sum) %>%
mutate(perc = round(sum/9*100,2)) %>%
{.[order(perc),]}
level1 %>% merge(key1, by.x="NodeID", by.y="id", all.x=T) %>%
dplyr::select(label, sum) %>%
mutate(perc = round(sum/9*100,2)) %>%
{.[order(.$perc),]}
level1 %>% merge(key1, by.x="NodeID", by.y="id", all.x=T) %>%
dplyr::select(label, sum) %>%
mutate(perc = round(sum/9*100,2)) %>%
{.[order(-.$perc),]}
library(rgdal)
library(dplyr)
library(gdalUtils)
library(OpenStreetMap)
library(proj4)
library(rgeos)
library(raster)
library(ggmap)
library(RCurl)
library(osmar)
library(osmdata)
library(magrittr)
library(sp)
library(tidyverse)
#FOR OSM
map_type <- "OSM"
map_folder <- "C:\\Users\\nishk\\Google Drive\\HSPH\\CCDD\\PR Mortality\\Maps\\OSM2\\"
openmap(42.335052, -71.103002, type = "osm", zoom = 16)
openmap(42.315052, -71.303002, type = "osm", zoom = 16)
openmap(42.375052, -71.073002, type = "osm", zoom = 16)
?openmap
openmap(c(42.336376, -71.105014)
c(42.333251, -71.097718), type = "osm", zoom = 16)
openmap(c(42.336376, -71.105014),
c(42.333251, -71.097718), type = "osm", zoom = 16)
#create temp file instance
file <- tempfile(pattern = "", fileext = ".tif")
extent[1,] <- c(42.336376, -71.105014)
extent <- rbind(c(42.336376, -71.105014),
c(42.333251, -71.097718))
extent
#create initial tiff in temp from plot
tiff(file, units = "px", height = nrow(raster(osm)), width = ncol(raster(osm)), compression = "none")
?raster
library(raster)
#create initial tiff in temp from plot
tiff(file, units = "px", height = nrow(raster(osm)), width = ncol(raster(osm)), compression = "none")
#create initial tiff in temp from plot
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
raster(osm)
?raster
osm
osm <- openmap(c(42.336376, -71.105014),
c(42.333251, -71.097718), type = "osm", zoom = 16)
#create initial tiff in temp from plot
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
par(bg=NA)
dev.off()
#pull plot back as a rasterbrick and give spatial extent
m <- brick(file)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[1,1]
ymax(m) <- extent[2,1]
crs(m)
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
m
#create initial tiff in temp from plot
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
dev.off()
extent[1,2]
extent[2,2]
#pull plot back as a rasterbrick and give spatial extent
m <- brick(file)
m
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[1,1]
ymax(m) <- extent[2,1]
crs(m) <- CRS("+init=epsg:6566")
m
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
x <- "hsph_test"
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
#execute gdal script
system(cmd)
osm <- openmap(c(42.336376, -71.105014),
c(42.333251, -71.097718), type = "osm")
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- paste(as.character(sel[i,]$barrio), as.character(sel[i,]$municipio))
Encoding(x) <- "UTF-8"
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
osm <- openmap(c(42.336376, -71.105014),
c(42.333251, -71.097718), type = "osm")
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
plot(osm)
system(cmd)
system(cmd)
osm <- openmap(c(42.336376, -71.105014),
c(42.333251, -71.097718), type = "osm", zoom = 17)
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
system(cmd)
osm <- openmap(c(42.336376, -71.105014),
c(42.333251, -71.097718), type = "osm", zoom = 14)
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
osm <- openmap(c(42.336376, -71.105014),
c(42.333251, -71.097718), type = "osm", zoom = 15)
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
osm <- openmap(c(42.336376, -71.115014),
c(42.333251, -71.087718), type = "osm", zoom = 16)
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
gc()
extent <- rbind(c(42.336376, -71.115014),
c(42.333251, -71.087718))
osm <- openmap(extent[1,],extent[2,], type = "osm")
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
extent <- rbind(c(42.340376, -71.119014),
c(42.333251, -71.090718))
osm <- openmap(extent[1,],extent[2,], type = "osm")
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
?openmap
?extent
?bbox
?boundingbox
??boundingbox
getbb("longwood boston")
getbb("Longwood", display_name_contains = "Boston", format_out = "data.frame", limit = 3)
getbb("Boston", display_name_contains = "United States", format_out = "data.frame", limit = 3)
getbb("Boston", display_name_contains = "United States")
extent <- getbb("Boston", display_name_contains = "United States")
osm <- openmap(extent[1,],extent[2,], type = "osm")
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
extent <- rbind(c(42.340376, -71.119014),
c(42.333251, -71.090718))
#extent <- getbb("Boston", display_name_contains = "United States")
osm <- openmap(extent[1,],extent[2,], type = "osm")
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
m <- brick (file)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[1,1]
ymax(m) <- extent[2,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[2,1]
ymax(m) <- extent[1,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 1
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
extent <- getbb("Boston", display_name_contains = "United States")
osm <- openmap(extent[1,],extent[2,], type = "osm")
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
m <- brick (file)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[1,1]
ymax(m) <- extent[2,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 2
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
extent <- getbb("Boston", display_name_contains = "United States")
osm <- openmap(extent[1,],extent[2,], type = "osm")
tiff(file, units = "px", height = nrow(raster::raster(osm)), width = ncol(raster(osm)), compression = "none")
plot(osm)
dev.off()
m <- brick (file)
xmin(m) <- extent[1,2]
xmax(m) <- extent[2,2]
ymin(m) <- extent[1,1]
ymax(m) <- extent[2,1]
crs(m) <- CRS("+init=epsg:6566")
#write raster to temp
writeRaster(m, sub("\\.tif", "_2\\.tif", file), "GTiff", overwrite = T)
#need to change name encoding for proper export
x <- "hsph_test"
i <- 2
#need to install GDAL Library - http://www.gisinternals.com/query.html?content=filelist&file=release-1800-x64-gdal-2-2-1-mapserver-7-0-6.zip
#add GDAL library to path as described here
#system command to convert GTiff to Geospatial PDF
cmd <- paste0("gdal_translate -of PDf -a_srs EPSG:4326 ",sub("\\.tif", "_2\\.tif", file)," ", "\"",map_folder, i,"_",gsub("\\s+", "_", x), ".pdf\"")
system(cmd)
rm(list = ls())
gc()
library(tidyverse)
library(magrittr)
#load data
source("./code/init.R")
#most duplicated form
level1[,-1] %>% rowSums(na.rm=T) -> level1$sum
level1 %>% merge(key1, by.x="NodeID", by.y="id", all.x=T) %>%
dplyr::select(label, sum) %>%
mutate(perc = round(sum/9*100,2)) %>%
{.[order(-.$perc),]}
level2
level2[3807,]
level2[3807,1]
level2[3808,1]
level2[1,1]
level2 %>% [1:3807,] -> level2
level2 %>% {.[1:3807,]} -> level2
level2 %>% mutate(perc = round(sum/9*100,2)) %>%
{.[order(-.$perc),]}
#most duplicated questions
level2[,-1] %>% rowSums(na.rm=T) -> level2$sum
level2
level2[,1]
level2[,-1:2]
level2[,c(-1,-2)]
#most duplicated questions
level2[,c(-1,-2)] %>% rowSums(na.rm=T) -> level2$sum
#level 2 is the question information per register
level2 <- read_xlsx("./data/raw/base_data.xlsx", sheet = "MASTER")
master
level2
View(level2)
level2 %>% {.[,c(-1,-2,-3,-5,-7,-8)]} -> level2
names(level2)
names(level2)[1:6]
names(level2)[1:6] <- c("id", "desc","notes","agg","agg_orig","cat")
names(level)
names(level1)
library(tidyverse)
library(magrittr)
#load data
source("./code/init.R")
#most duplicated form
level1[,-1] %>% rowSums(na.rm=T) -> level1$sum
level1 %>% merge(key1, by="id", all.x=T) %>%
dplyr::select(label, sum) %>%
mutate(perc = round(sum/9*100,2)) %>%
{.[order(-.$perc),]}
level2
-(1:6)
level2[,-(1:6)]
level2[,-(1:6)] %>% rowSums(na.rm=T) -> level2$sum
"f" %>% as.numeric()
level2[,-(1:6)] %>% as.numeric
level2[,-(1:6)] %>% sapply(as.numeric)
level2[,-(1:6)]
level2[,-(1:6)] %>% sapply(as.numeric) -> level2[,-(1:6)]
#most duplicated questions
level2[,-(1:6)] %>% rowSums(na.rm=T) -> level2$sum
level2 %>% mutate(perc = round(sum/9*100,2)) %>%
{.[order(-.$perc),]}
level2 %>% mutate(perc = round(sum/9*100,2)) %>%
select(id,desc,cat, perc) %>%
{.[order(-.$perc),]}
level2 %>% mutate(perc = round(sum/9*100,2)) %>%
dplyr::select(id,desc,cat, perc) %>%
{.[order(-.$perc),]}
ncol(level2)
178-6
level2 %>% mutate(perc = round(sum/172*100,2)) %>%
dplyr::select(id,desc,cat, perc) %>%
{.[order(-.$perc),]}
level2 %>% mutate(perc = round(sum/172*100,2)) %>%
dplyr::select(id,desc,cat, perc) %>%
{.[order(-.$perc),]} -> x
View(x)
level1 %>% merge(key1, by="id", all.x=T) %>%
dplyr::select(label, sum) %>%
mutate(perc = round(sum/9*100,2)) %>%
{.[order(-.$perc),]}
level2 %>% mutate(perc = round(sum/172*100,2)) %>%
dplyr::select(id,desc,cat, perc) %>%
{.[order(-.$perc),]} %>% kable -> x
library(kable)
?kable
??kable
source("C://Users/nishk/Downloads/muxViz-master/muxVizGUI.R")
install.packages("shiny")
source("C://Users/nishk/Downloads/muxViz-master/muxVizGUI.R")
source("C://Users/nishk/Downloads/muxViz-master/muxVizGUI.R")
install.packages("shiny")
install.packages("yaml")
source("C://Users/nishk/Downloads/muxViz-master/muxVizGUI.R")
install.packages("shiny")
